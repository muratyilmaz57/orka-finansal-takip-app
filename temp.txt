import { useCallback, useMemo, useState } from "react";
import {
  ActivityIndicator,
  RefreshControl,
  SafeAreaView,
  ScrollView,
  StyleSheet,
  Text,
  TouchableOpacity,
  View,
} from "react-native";

import { useAuth } from "@/context/AuthContext";
import { useAccountingBalancesQuery } from "@/hooks/useOrkaQueries";
import { parseAmount } from "@/utils/number";

type BalanceMode = "payable" | "receivable";

type CustomerBalance = {
  id: string;
  code: string;
  name: string;
  amount: number;
};

type CustomerBalanceBuckets = {
  payable: CustomerBalance[];
  receivable: CustomerBalance[];
};

export default function CustomerBalancesScreen() {
  const { state } = useAuth();
  const targetYear = state.companyYear ?? new Date().getFullYear();
  const [mode, setMode] = useState<BalanceMode>("receivable");
  const accountingBalances = useAccountingBalancesQuery({
    Year: targetYear,
    PageNo: 1,
    PageSize: 200,
  });

  const buckets = useMemo(
    () => buildCustomerBalanceBuckets(accountingBalances.data ?? []),
    [accountingBalances.data],
  );

  const currentList = useMemo(
    () => (mode === "receivable" ? buckets.receivable : buckets.payable),
    [buckets, mode],
  );

  const totalAmount = useMemo(
    () => currentList.reduce((sum, item) => sum + item.amount, 0),
    [currentList],
  );

  const summaryLabel = mode === "receivable" ? "Toplam Alacak" : "Toplam Borç";
  const companyLabel =
    state.selectedCompany?.unvan1 ??
    state.selectedCompany?.veritabaniadi ??
    "Firma seçilmedi";

  const refreshing = accountingBalances.isRefetching;
  const handleRefresh = useCallback(() => {
    void accountingBalances.refetch();
  }, [accountingBalances]);

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView
        contentContainerStyle={styles.content}
        refreshControl={
          <RefreshControl
            tintColor="#fff"
            refreshing={refreshing}
            onRefresh={handleRefresh}
          />
        }
      >
        <View style={styles.header}>
          <Text style={styles.title}>Cari Durum</Text>
          <Text style={styles.company}>{companyLabel}</Text>
        </View>

        <View style={styles.toggleRow}>
          <ToggleButton
            label="Borç"
            active={mode === "payable"}
            onPress={() => setMode("payable")}
          />
          <ToggleButton
            label="Alacak"
            active={mode === "receivable"}
            onPress={() => setMode("receivable")}
          />
        </View>

        <View style={styles.summaryCard}>
          <Text style={styles.summaryLabel}>{summaryLabel}</Text>
          <Text style={styles.summaryAmount}>{formatAmount(totalAmount)}</Text>
          <Text style={styles.summarySubtitle}>
            {currentList.length} {currentList.length === 1 ? "cari" : "cariler"}
          </Text>
        </View>

        {accountingBalances.isLoading ? (
          <ActivityIndicator color="#38bdf8" />
        ) : accountingBalances.error ? (
          <Text style={styles.errorText}>
            Cari bakiyeler yüklenemedi:{" "}
            {(accountingBalances.error as Error)?.message ?? "Bilinmeyen hata"}
          </Text>
        ) : currentList.length === 0 ? (
          <Text style={styles.placeholder}>
            {mode === "receivable"
              ? "Alacak bakiyesi bulunan cari yok."
              : "Borç bakiyesi bulunan cari yok."}
          </Text>
        ) : (
          currentList.map((item) => (
            <View key={item.id} style={styles.itemCard}>
              <View style={styles.itemInfo}>
                <Text style={styles.itemName}>{item.name}</Text>
                <Text style={styles.itemCode}>{item.code}</Text>
              </View>
              <Text style={styles.itemAmount}>{formatAmount(item.amount)}</Text>
            </View>
          ))
        )}
      </ScrollView>
    </SafeAreaView>
  );
}

type ToggleButtonProps = {
  label: string;
  active: boolean;
  onPress: () => void;
};

function ToggleButton({ label, active, onPress }: ToggleButtonProps) {
  return (
    <TouchableOpacity
      onPress={onPress}
      style={[styles.toggleButton, active && styles.toggleButtonActive]}
      activeOpacity={0.85}
    >
      <Text style={[styles.toggleButtonText, active && styles.toggleButtonTextActive]}>
        {label}
      </Text>
    </TouchableOpacity>
  );
}

const RECEIVABLE_PREFIXES = ["120", "121", "126", "127", "128"];
const PAYABLE_PREFIXES = ["320", "321", "326", "329"];
const MIN_DISPLAY_AMOUNT = 0.01;

function buildCustomerBalanceBuckets(records: any[]): CustomerBalanceBuckets {
  const receivable: CustomerBalance[] = [];
  const payable: CustomerBalance[] = [];

  for (const record of records ?? []) {
    if (!isLeafBalanceRow(record)) continue;
    const planCode = resolvePlanCode(record);
    if (!planCode) continue;
    const normalizedCode = planCode.replace(/\s+/g, "");
    const debit =
      parseAmount(record?.tlborcbakiye, { allowScaleDown: false }) ??
      parseAmount(record?.TlBorcBakiye, { allowScaleDown: false }) ??
      0;
    const credit =
      parseAmount(record?.tlalacbakiye, { allowScaleDown: false }) ??
      parseAmount(record?.TlAlacBakiye, { allowScaleDown: false }) ??
      0;

    const rawName = resolveCustomerName(record);
    const code = resolveCustomerCode(record, normalizedCode);
    const id = resolveCustomerId(record, code);
    const name = formatDisplayName(rawName, code);

    if (isReceivableAccount(normalizedCode)) {
      const net = debit - credit;
      if (net > MIN_DISPLAY_AMOUNT) {
        receivable.push({ id, code, name, amount: net });
      } else if (net < -MIN_DISPLAY_AMOUNT) {
        payable.push({ id: `${id}-neg`, code, name, amount: Math.abs(net) });
      }
    } else if (isPayableAccount(normalizedCode)) {
      const net = credit - debit;
      if (net > MIN_DISPLAY_AMOUNT) {
        payable.push({ id, code, name, amount: net });
      } else if (net < -MIN_DISPLAY_AMOUNT) {
        receivable.push({ id: `${id}-neg`, code, name, amount: Math.abs(net) });
      }
    }
  }

  receivable.sort((a, b) => b.amount - a.amount);
  payable.sort((a, b) => b.amount - a.amount);

  return { receivable, payable };
}

function isLeafBalanceRow(record: any): boolean {
  const value =
    record?.mizanplantur ??
    record?.MizanPlanTur ??
    record?.planTur ??
    record?.PlanTur ??
    null;
  if (value === null || value === undefined) {
    return true;
  }
  if (typeof value === "number") {
    return value === 6;
  }
  const parsed = Number.parseInt(String(value), 10);
  if (Number.isNaN(parsed)) {
    return true;
  }
  return parsed === 6;
}

function resolvePlanCode(record: any): string | null {
  const code =
    record?.mizanplankodu ??
    record?.MizanPlanKodu ??
    record?.CariPlanKodu ??
    record?.cariplankodu ??
    record?.plankodu ??
    record?.PlanKodu ??
    record?.PlanKod ??
    record?.CariKod ??
    record?.carikod ??
    null;
  if (!code) return null;
  const text = String(code).trim();
  return text.length > 0 ? text : null;
}

function isReceivableAccount(code: string): boolean {
  return RECEIVABLE_PREFIXES.some((prefix) => code.startsWith(prefix));
}

function isPayableAccount(code: string): boolean {
  return PAYABLE_PREFIXES.some((prefix) => code.startsWith(prefix));
}

function resolveCustomerName(record: any): string {
  return (
    record?.CariUnvan ??
    record?.CariUnvan1 ??
    record?.CariUnvan2 ??
    record?.CariUnvani ??
    record?.CariUnvani1 ??
    record?.CariUnvani2 ??
    record?.cariUnvan ??
    record?.cariunvan ??
    record?.cariUnvan1 ??
    record?.cariUnvan2 ??
    record?.CariAdi ??
    record?.CariAd ??
    record?.CariIsmi ??
    record?.CariIsim ??
    record?.cariIsmi ??
    record?.cariIsim ??
    record?.CariAdi1 ??
    record?.CariAdi2 ??
    record?.cariadi ??
    record?.cariAd ??
    record?.cariAdi1 ??
    record?.cariAdi2 ??
    record?.planadi ??
    record?.PlanAdi ??
    record?.PlanAd ??
    record?.cariplanadi ??
    record?.CariPlanAdi ??
    record?.CariPlanAd ??
    record?.PlanAciklamasi ??
    record?.planAciklamasi ??
    record?.mizanplanadi ??
    record?.MizanPlanAdi ??
    record?.hesapadi ??
    record?.HesapAdi ??
    record?.unvan ??
    record?.Unvan ??
    record?.firmaAdi ??
    record?.FirmaAdi ??
    record?.name ??
    record?.Name ??
    ""
  );
}

function resolveCustomerCode(record: any, fallback: string): string {
  return (
    record?.CariKod ??
    record?.CariKodu ??
    record?.cariKod ??
    record?.cariKodu ??
    record?.carikod ??
    record?.Plankodu ??
    record?.plankodu ??
    record?.PlanKod ??
    record?.PlanKodu ??
    record?.PlanKodNo ??
    fallback
  );
}

const MAX_NAME_LENGTH = 10;

function formatDisplayName(name: string, fallback: string): string {
  const base = name && name.trim().length > 0 ? name.trim() : fallback;
  if (base.length <= MAX_NAME_LENGTH) {
    return base;
  }
  return `${base.slice(0, MAX_NAME_LENGTH)}...`;
}

function resolveCustomerId(record: any, fallback: string): string {
  const raw =
    record?.cariid ??
    record?.CariId ??
    record?.CariID ??
    record?.carilogicalref ??
    record?.cariLogicalRef ??
    record?.LOGICALREF ??
    record?.LogicalRef ??
    record?.id ??
    record?.Id ??
    null;
  if (raw === null || raw === undefined) {
    return fallback;
  }
  return String(raw);
}

function formatAmount(value: number): string {
  const normalized = Number.isFinite(value) ? value : 0;
  return `TL ${normalized.toLocaleString("tr-TR", { minimumFractionDigits: 2 })}`;
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#0B1120",
  },
  content: {
    padding: 20,
    gap: 16,
    paddingBottom: 40,
  },
  header: {
    gap: 4,
  },
  title: {
    fontSize: 22,
    fontWeight: "700",
    color: "#F8FAFC",
  },
  company: {
    color: "#94A3B8",
    fontSize: 14,
  },
  toggleRow: {
    flexDirection: "row",
    gap: 8,
  },
  toggleButton: {
    flex: 1,
    borderWidth: 1,
    borderColor: "#1E293B",
    paddingVertical: 10,
    borderRadius: 12,
    alignItems: "center",
    backgroundColor: "#0F172A",
  },
  toggleButtonActive: {
    backgroundColor: "#38bdf8",
    borderColor: "#38bdf8",
  },
  toggleButtonText: {
    color: "#94A3B8",
    fontSize: 15,
    fontWeight: "600",
  },
  toggleButtonTextActive: {
    color: "#0B1120",
  },
  summaryCard: {
    backgroundColor: "#0F172A",
    borderRadius: 16,
    padding: 16,
    gap: 6,
    borderWidth: 1,
    borderColor: "#1E293B",
  },
  summaryLabel: {
    color: "#94A3B8",
    fontSize: 14,
  },
  summaryAmount: {
    color: "#F8FAFC",
    fontSize: 24,
    fontWeight: "700",
  },
  summarySubtitle: {
    color: "#64748B",
    fontSize: 14,
  },
  errorText: {
    color: "#F87171",
  },
  placeholder: {
    color: "#94A3B8",
    fontSize: 16,
  },
  itemCard: {
    backgroundColor: "#0F172A",
    borderRadius: 14,
    padding: 16,
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
    borderWidth: 1,
    borderColor: "#1E293B",
  },
  itemInfo: {
    flex: 1,
    marginRight: 12,
    gap: 4,
  },
  itemName: {
    color: "#F1F5F9",
    fontSize: 16,
    fontWeight: "600",
  },
  itemCode: {
    color: "#64748B",
    fontSize: 13,
  },
  itemAmount: {
    color: "#F8FAFC",
    fontSize: 18,
    fontWeight: "700",
  },
});

